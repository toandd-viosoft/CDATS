;
; Dataplane Automated Testing System
;
; Copyright (c) 2015-2016, Intel Corporation.
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions
; are met:
;
;   * Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
;   * Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in
;     the documentation and/or other materials provided with the
;     distribution.
;   * Neither the name of Intel Corporation nor the names of its
;     contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;

;
; This configuration creates the functionality of a lwAFTR component of the
; lw4over6 architecture as described in IETF draft available at:
;   http://tools.ietf.org/id/draft-ietf-softwire-lw4over6-13.txt
; The lwAFTR simply terminates IPv6 tunnels that carry IPv4 traffic for many
; customers (one tunnel per customer). It consists of two tasks:
; 1) ipv6_encap that encapsulates IPv4 packets into IPv6 and sends those tunnel
;    packets towards the customer tunnel endpoint. For this, it must use a
;    binding table that associates with each tunnel, a public IPv4 address and a
;    set of ports.
; 2) ipv6_decap which handles packets arriving from the tunnel, checks they use
;    a source IPv4 address and port combination that matches their originating
;    tunnel (based on the same binding table as used by ipv6_encap), removes the
;    IPv6 encapsulation and sends them out its "internet" interface.
; The binding table must be loaded in the [lua] section and assigned to the
; tasks using the "tun_bindings" parameter. This configuration loads its binding
; table from the provided ip6_tun_bind_65k.lua.
;

[eal options]
-n=4 ; force number of memory channels
no-output=no ; disable DPDK debug output
eal=-b 0000:00:03.0

[lua]
dofile("parameters.lua")
bindings = dofile("ip6_tun_bind_65k.lua")

[port 0]
name=inet_0
mac=hardware
rx desc=2048
tx desc=2048
[port 1]
name=lwB4_0
mac=hardware
rx desc=2048
tx desc=2048
[port 2]
name=inet_1
mac=hardware
rx desc=2048
tx desc=2048
[port 3]
name=lwB4_1
mac=hardware
rx desc=2048
tx desc=2048

[variables]
$tun_hop_limit=5
$local_ipv6=fe80:0000:0000:0000:0100:00ff:fe00:0000
$lookup_port_mask=0xffc0

[defaults]
mempool size=32K
memcache size=512

[global]
start time=20
name=lw_AFTR

[core $sut_master]
mode=master

;*****************************************************************************************
;##### Send Internet IPv4 traffic into IPv6 tunnels, according to binding table ####
[core $sut_core1]
name=v6_encap
task=0
mode=ipv6_encap
rx port=inet_0
tx cores=${sut_core1}t1
drop=no
local ipv6=$local_ipv6
tunnel hop limit=$tun_hop_limit
lookup port mask=$lookup_port_mask
tun_bindings=bindings

task=1
mode=l2fwd
dst mac=$tester_mac1
rx ring=yes
tx port=lwB4_0
drop=no

[core $sut_core2]
name=v6_encap
task=0
mode=ipv6_encap
rx port=inet_1
tx cores=${sut_core2}t1
drop=no
local ipv6=$local_ipv6
tunnel hop limit=$tun_hop_limit
lookup port mask=$lookup_port_mask
tun_bindings=bindings

task=1
mode=l2fwd
dst mac=$tester_mac3
rx ring=yes
tx port=lwB4_1
drop=no

;*****************************************************************************************
;##### Terminate IPv6 tunnels and transmit IPv4 out to Internet ####
;# Binding table is checked to ensure src IPv4 address and port combo is allocated to the originating tunnel
[core $sut_core3]
name=v6_decap
task=0
mode=ipv6_decap
rx port=lwB4_0
tx cores=${sut_core3}t1
drop=no
local ipv6=$local_ipv6
tunnel hop limit=$tun_hop_limit
lookup port mask=$lookup_port_mask
tun_bindings=bindings

task=1
mode=l2fwd
dst mac=$tester_mac0
rx ring=yes
tx port=inet_0
drop=no

[core $sut_core4]
name=v6_decap
task=0
mode=ipv6_decap
rx port=lwB4_1
tx cores=${sut_core4}t1
drop=no
local ipv6=$local_ipv6
tunnel hop limit=$tun_hop_limit
lookup port mask=$lookup_port_mask
tun_bindings=bindings

task=1
mode=l2fwd
dst mac=$tester_mac2
rx ring=yes
tx port=inet_1
drop=no

